{"ast":null,"code":"const API_BASE_URL = \"https://api.zujonow.com\";\nconst VIDEOSDK_TOKEN = process.env.REACT_APP_VIDEOSDK_TOKEN;\nconst API_AUTH_URL = process.env.REACT_APP_AUTH_URL;\nexport const getToken = async () => {\n  if (VIDEOSDK_TOKEN && API_AUTH_URL) {\n    console.error(\"Error: Provide only ONE PARAMETER - either Token or Auth API\");\n  } else if (VIDEOSDK_TOKEN) {\n    return VIDEOSDK_TOKEN;\n  } else if (API_AUTH_URL) {\n    const res = await fetch(`${API_AUTH_URL}/get-token`, {\n      method: \"GET\"\n    });\n    const {\n      token\n    } = await res.json();\n    return token;\n  } else {\n    console.error(\"Error: \", Error(\"Please add a token or Auth Server URL\"));\n  }\n};\nexport const createMeeting = async _ref => {\n  let {\n    token\n  } = _ref;\n  const url = `${API_BASE_URL}/api/meetings`;\n  const options = {\n    method: \"POST\",\n    headers: {\n      Authorization: token,\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const {\n    meetingId\n  } = await fetch(url, options).then(response => response.json()).catch(error => console.error(\"error\", error));\n  return meetingId;\n};\nexport const validateMeeting = async _ref2 => {\n  let {\n    meetingId,\n    token\n  } = _ref2;\n  const url = `${API_BASE_URL}/api/meetings/${meetingId}`;\n  const options = {\n    method: \"POST\",\n    headers: {\n      Authorization: token\n    }\n  };\n  const result = await fetch(url, options).then(response => response.json()) //result will have meeting id\n  .catch(error => console.error(\"error\", error));\n  return result ? result.meetingId === meetingId : false;\n};","map":{"version":3,"sources":["/home/vit/videosdk-rtc-react-sdk-example/src/api.js"],"names":["API_BASE_URL","VIDEOSDK_TOKEN","process","env","REACT_APP_VIDEOSDK_TOKEN","API_AUTH_URL","REACT_APP_AUTH_URL","getToken","console","error","res","fetch","method","token","json","Error","createMeeting","url","options","headers","Authorization","meetingId","then","response","catch","validateMeeting","result"],"mappings":"AAAA,MAAMA,YAAY,GAAG,yBAArB;AACA,MAAMC,cAAc,GAAGC,OAAO,CAACC,GAAR,CAAYC,wBAAnC;AACA,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAR,CAAYG,kBAAjC;AAEA,OAAO,MAAMC,QAAQ,GAAG,YAAY;AAClC,MAAIN,cAAc,IAAII,YAAtB,EAAoC;AAClCG,IAAAA,OAAO,CAACC,KAAR,CACE,8DADF;AAGD,GAJD,MAIO,IAAIR,cAAJ,EAAoB;AACzB,WAAOA,cAAP;AACD,GAFM,MAEA,IAAII,YAAJ,EAAkB;AACvB,UAAMK,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,YAAjB,EAA8B;AACnDO,MAAAA,MAAM,EAAE;AAD2C,KAA9B,CAAvB;AAGA,UAAM;AAAEC,MAAAA;AAAF,QAAY,MAAMH,GAAG,CAACI,IAAJ,EAAxB;AACA,WAAOD,KAAP;AACD,GANM,MAMA;AACLL,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBM,KAAK,CAAC,uCAAD,CAA9B;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMC,aAAa,GAAG,cAAqB;AAAA,MAAd;AAAEH,IAAAA;AAAF,GAAc;AAChD,QAAMI,GAAG,GAAI,GAAEjB,YAAa,eAA5B;AACA,QAAMkB,OAAO,GAAG;AACdN,IAAAA,MAAM,EAAE,MADM;AAEdO,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAEP,KAAjB;AAAwB,sBAAgB;AAAxC;AAFK,GAAhB;AAKA,QAAM;AAAEQ,IAAAA;AAAF,MAAgB,MAAMV,KAAK,CAACM,GAAD,EAAMC,OAAN,CAAL,CACzBI,IADyB,CACnBC,QAAD,IAAcA,QAAQ,CAACT,IAAT,EADM,EAEzBU,KAFyB,CAElBf,KAAD,IAAWD,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAFQ,CAA5B;AAIA,SAAOY,SAAP;AACD,CAZM;AAcP,OAAO,MAAMI,eAAe,GAAG,eAAgC;AAAA,MAAzB;AAAEJ,IAAAA,SAAF;AAAaR,IAAAA;AAAb,GAAyB;AAC7D,QAAMI,GAAG,GAAI,GAAEjB,YAAa,iBAAgBqB,SAAU,EAAtD;AAEA,QAAMH,OAAO,GAAG;AACdN,IAAAA,MAAM,EAAE,MADM;AAEdO,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAEP;AAAjB;AAFK,GAAhB;AAKA,QAAMa,MAAM,GAAG,MAAMf,KAAK,CAACM,GAAD,EAAMC,OAAN,CAAL,CAClBI,IADkB,CACZC,QAAD,IAAcA,QAAQ,CAACT,IAAT,EADD,EACkB;AADlB,GAElBU,KAFkB,CAEXf,KAAD,IAAWD,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAFC,CAArB;AAIA,SAAOiB,MAAM,GAAGA,MAAM,CAACL,SAAP,KAAqBA,SAAxB,GAAoC,KAAjD;AACD,CAbM","sourcesContent":["const API_BASE_URL = \"https://api.zujonow.com\";\nconst VIDEOSDK_TOKEN = process.env.REACT_APP_VIDEOSDK_TOKEN;\nconst API_AUTH_URL = process.env.REACT_APP_AUTH_URL;\n\nexport const getToken = async () => {\n  if (VIDEOSDK_TOKEN && API_AUTH_URL) {\n    console.error(\n      \"Error: Provide only ONE PARAMETER - either Token or Auth API\"\n    );\n  } else if (VIDEOSDK_TOKEN) {\n    return VIDEOSDK_TOKEN;\n  } else if (API_AUTH_URL) {\n    const res = await fetch(`${API_AUTH_URL}/get-token`, {\n      method: \"GET\",\n    });\n    const { token } = await res.json();\n    return token;\n  } else {\n    console.error(\"Error: \", Error(\"Please add a token or Auth Server URL\"));\n  }\n};\n\nexport const createMeeting = async ({ token }) => {\n  const url = `${API_BASE_URL}/api/meetings`;\n  const options = {\n    method: \"POST\",\n    headers: { Authorization: token, \"Content-Type\": \"application/json\" },\n  };\n\n  const { meetingId } = await fetch(url, options)\n    .then((response) => response.json())\n    .catch((error) => console.error(\"error\", error));\n\n  return meetingId;\n};\n\nexport const validateMeeting = async ({ meetingId, token }) => {\n  const url = `${API_BASE_URL}/api/meetings/${meetingId}`;\n\n  const options = {\n    method: \"POST\",\n    headers: { Authorization: token },\n  };\n\n  const result = await fetch(url, options)\n    .then((response) => response.json()) //result will have meeting id\n    .catch((error) => console.error(\"error\", error));\n\n  return result ? result.meetingId === meetingId : false;\n};\n"]},"metadata":{},"sourceType":"module"}